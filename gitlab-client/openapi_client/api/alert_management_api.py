# coding: utf-8

"""
    GitLab API

    An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBytes, StrictInt, StrictStr
from typing import List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.api_entities_metric_image import APIEntitiesMetricImage

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class AlertManagementApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_metric_image_id(
        self,
        id: Annotated[StrictStr, Field(description="The ID or URL-encoded path of the project")],
        alert_iid: Annotated[StrictInt, Field(description="The IID of the Alert")],
        metric_image_id: Annotated[StrictInt, Field(description="The ID of metric image")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> APIEntitiesMetricImage:
        """delete_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_metric_image_id

        Remove a metric image for an alert

        :param id: The ID or URL-encoded path of the project (required)
        :type id: str
        :param alert_iid: The IID of the Alert (required)
        :type alert_iid: int
        :param metric_image_id: The ID of metric image (required)
        :type metric_image_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_metric_image_id_serialize(
            id=id,
            alert_iid=alert_iid,
            metric_image_id=metric_image_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "APIEntitiesMetricImage",
            '403': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_metric_image_id_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="The ID or URL-encoded path of the project")],
        alert_iid: Annotated[StrictInt, Field(description="The IID of the Alert")],
        metric_image_id: Annotated[StrictInt, Field(description="The ID of metric image")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[APIEntitiesMetricImage]:
        """delete_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_metric_image_id

        Remove a metric image for an alert

        :param id: The ID or URL-encoded path of the project (required)
        :type id: str
        :param alert_iid: The IID of the Alert (required)
        :type alert_iid: int
        :param metric_image_id: The ID of metric image (required)
        :type metric_image_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_metric_image_id_serialize(
            id=id,
            alert_iid=alert_iid,
            metric_image_id=metric_image_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "APIEntitiesMetricImage",
            '403': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_metric_image_id_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="The ID or URL-encoded path of the project")],
        alert_iid: Annotated[StrictInt, Field(description="The IID of the Alert")],
        metric_image_id: Annotated[StrictInt, Field(description="The ID of metric image")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_metric_image_id

        Remove a metric image for an alert

        :param id: The ID or URL-encoded path of the project (required)
        :type id: str
        :param alert_iid: The IID of the Alert (required)
        :type alert_iid: int
        :param metric_image_id: The ID of metric image (required)
        :type metric_image_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_metric_image_id_serialize(
            id=id,
            alert_iid=alert_iid,
            metric_image_id=metric_image_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "APIEntitiesMetricImage",
            '403': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_metric_image_id_serialize(
        self,
        id,
        alert_iid,
        metric_image_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        if alert_iid is not None:
            _path_params['alert_iid'] = alert_iid
        if metric_image_id is not None:
            _path_params['metric_image_id'] = metric_image_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/projects/{id}/alert_management_alerts/{alert_iid}/metric_images/{metric_image_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images(
        self,
        id: Annotated[StrictStr, Field(description="The ID or URL-encoded path of the project")],
        alert_iid: Annotated[StrictInt, Field(description="The IID of the Alert")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[APIEntitiesMetricImage]:
        """get_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images

        Metric Images for alert

        :param id: The ID or URL-encoded path of the project (required)
        :type id: str
        :param alert_iid: The IID of the Alert (required)
        :type alert_iid: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_serialize(
            id=id,
            alert_iid=alert_iid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[APIEntitiesMetricImage]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="The ID or URL-encoded path of the project")],
        alert_iid: Annotated[StrictInt, Field(description="The IID of the Alert")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[APIEntitiesMetricImage]]:
        """get_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images

        Metric Images for alert

        :param id: The ID or URL-encoded path of the project (required)
        :type id: str
        :param alert_iid: The IID of the Alert (required)
        :type alert_iid: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_serialize(
            id=id,
            alert_iid=alert_iid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[APIEntitiesMetricImage]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="The ID or URL-encoded path of the project")],
        alert_iid: Annotated[StrictInt, Field(description="The IID of the Alert")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images

        Metric Images for alert

        :param id: The ID or URL-encoded path of the project (required)
        :type id: str
        :param alert_iid: The IID of the Alert (required)
        :type alert_iid: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_serialize(
            id=id,
            alert_iid=alert_iid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[APIEntitiesMetricImage]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_serialize(
        self,
        id,
        alert_iid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        if alert_iid is not None:
            _path_params['alert_iid'] = alert_iid
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/projects/{id}/alert_management_alerts/{alert_iid}/metric_images',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images(
        self,
        id: Annotated[StrictStr, Field(description="The ID or URL-encoded path of the project")],
        alert_iid: Annotated[StrictInt, Field(description="The IID of the Alert")],
        file: Annotated[Union[StrictBytes, StrictStr], Field(description="The image file to be uploaded")],
        url: Annotated[Optional[StrictStr], Field(description="The url to view more metric info")] = None,
        url_text: Annotated[Optional[StrictStr], Field(description="A description of the image or URL")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> APIEntitiesMetricImage:
        """post_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images

        Upload a metric image for an alert

        :param id: The ID or URL-encoded path of the project (required)
        :type id: str
        :param alert_iid: The IID of the Alert (required)
        :type alert_iid: int
        :param file: The image file to be uploaded (required)
        :type file: bytearray
        :param url: The url to view more metric info
        :type url: str
        :param url_text: A description of the image or URL
        :type url_text: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_serialize(
            id=id,
            alert_iid=alert_iid,
            file=file,
            url=url,
            url_text=url_text,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APIEntitiesMetricImage",
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="The ID or URL-encoded path of the project")],
        alert_iid: Annotated[StrictInt, Field(description="The IID of the Alert")],
        file: Annotated[Union[StrictBytes, StrictStr], Field(description="The image file to be uploaded")],
        url: Annotated[Optional[StrictStr], Field(description="The url to view more metric info")] = None,
        url_text: Annotated[Optional[StrictStr], Field(description="A description of the image or URL")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[APIEntitiesMetricImage]:
        """post_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images

        Upload a metric image for an alert

        :param id: The ID or URL-encoded path of the project (required)
        :type id: str
        :param alert_iid: The IID of the Alert (required)
        :type alert_iid: int
        :param file: The image file to be uploaded (required)
        :type file: bytearray
        :param url: The url to view more metric info
        :type url: str
        :param url_text: A description of the image or URL
        :type url_text: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_serialize(
            id=id,
            alert_iid=alert_iid,
            file=file,
            url=url,
            url_text=url_text,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APIEntitiesMetricImage",
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="The ID or URL-encoded path of the project")],
        alert_iid: Annotated[StrictInt, Field(description="The IID of the Alert")],
        file: Annotated[Union[StrictBytes, StrictStr], Field(description="The image file to be uploaded")],
        url: Annotated[Optional[StrictStr], Field(description="The url to view more metric info")] = None,
        url_text: Annotated[Optional[StrictStr], Field(description="A description of the image or URL")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images

        Upload a metric image for an alert

        :param id: The ID or URL-encoded path of the project (required)
        :type id: str
        :param alert_iid: The IID of the Alert (required)
        :type alert_iid: int
        :param file: The image file to be uploaded (required)
        :type file: bytearray
        :param url: The url to view more metric info
        :type url: str
        :param url_text: A description of the image or URL
        :type url_text: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_serialize(
            id=id,
            alert_iid=alert_iid,
            file=file,
            url=url,
            url_text=url_text,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APIEntitiesMetricImage",
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_serialize(
        self,
        id,
        alert_iid,
        file,
        url,
        url_text,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        if alert_iid is not None:
            _path_params['alert_iid'] = alert_iid
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if file is not None:
            _files['file'] = file
        if url is not None:
            _form_params.append(('url', url))
        if url_text is not None:
            _form_params.append(('url_text', url_text))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/projects/{id}/alert_management_alerts/{alert_iid}/metric_images',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_authorize(
        self,
        id: Annotated[StrictStr, Field(description="The ID or URL-encoded path of the project")],
        alert_iid: Annotated[StrictInt, Field(description="The IID of the Alert")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """post_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_authorize

        Workhorse authorize metric image file upload

        :param id: The ID or URL-encoded path of the project (required)
        :type id: str
        :param alert_iid: The IID of the Alert (required)
        :type alert_iid: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_authorize_serialize(
            id=id,
            alert_iid=alert_iid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_authorize_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="The ID or URL-encoded path of the project")],
        alert_iid: Annotated[StrictInt, Field(description="The IID of the Alert")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """post_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_authorize

        Workhorse authorize metric image file upload

        :param id: The ID or URL-encoded path of the project (required)
        :type id: str
        :param alert_iid: The IID of the Alert (required)
        :type alert_iid: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_authorize_serialize(
            id=id,
            alert_iid=alert_iid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_authorize_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="The ID or URL-encoded path of the project")],
        alert_iid: Annotated[StrictInt, Field(description="The IID of the Alert")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_authorize

        Workhorse authorize metric image file upload

        :param id: The ID or URL-encoded path of the project (required)
        :type id: str
        :param alert_iid: The IID of the Alert (required)
        :type alert_iid: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_authorize_serialize(
            id=id,
            alert_iid=alert_iid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_authorize_serialize(
        self,
        id,
        alert_iid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        if alert_iid is not None:
            _path_params['alert_iid'] = alert_iid
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/projects/{id}/alert_management_alerts/{alert_iid}/metric_images/authorize',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_metric_image_id(
        self,
        id: Annotated[StrictStr, Field(description="The ID or URL-encoded path of the project")],
        alert_iid: Annotated[StrictInt, Field(description="The IID of the Alert")],
        metric_image_id: Annotated[StrictInt, Field(description="The ID of metric image")],
        url: Annotated[Optional[StrictStr], Field(description="The url to view more metric info")] = None,
        url_text: Annotated[Optional[StrictStr], Field(description="A description of the image or URL")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> APIEntitiesMetricImage:
        """put_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_metric_image_id

        Update a metric image for an alert

        :param id: The ID or URL-encoded path of the project (required)
        :type id: str
        :param alert_iid: The IID of the Alert (required)
        :type alert_iid: int
        :param metric_image_id: The ID of metric image (required)
        :type metric_image_id: int
        :param url: The url to view more metric info
        :type url: str
        :param url_text: A description of the image or URL
        :type url_text: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_metric_image_id_serialize(
            id=id,
            alert_iid=alert_iid,
            metric_image_id=metric_image_id,
            url=url,
            url_text=url_text,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APIEntitiesMetricImage",
            '403': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_metric_image_id_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="The ID or URL-encoded path of the project")],
        alert_iid: Annotated[StrictInt, Field(description="The IID of the Alert")],
        metric_image_id: Annotated[StrictInt, Field(description="The ID of metric image")],
        url: Annotated[Optional[StrictStr], Field(description="The url to view more metric info")] = None,
        url_text: Annotated[Optional[StrictStr], Field(description="A description of the image or URL")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[APIEntitiesMetricImage]:
        """put_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_metric_image_id

        Update a metric image for an alert

        :param id: The ID or URL-encoded path of the project (required)
        :type id: str
        :param alert_iid: The IID of the Alert (required)
        :type alert_iid: int
        :param metric_image_id: The ID of metric image (required)
        :type metric_image_id: int
        :param url: The url to view more metric info
        :type url: str
        :param url_text: A description of the image or URL
        :type url_text: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_metric_image_id_serialize(
            id=id,
            alert_iid=alert_iid,
            metric_image_id=metric_image_id,
            url=url,
            url_text=url_text,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APIEntitiesMetricImage",
            '403': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_metric_image_id_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="The ID or URL-encoded path of the project")],
        alert_iid: Annotated[StrictInt, Field(description="The IID of the Alert")],
        metric_image_id: Annotated[StrictInt, Field(description="The ID of metric image")],
        url: Annotated[Optional[StrictStr], Field(description="The url to view more metric info")] = None,
        url_text: Annotated[Optional[StrictStr], Field(description="A description of the image or URL")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """put_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_metric_image_id

        Update a metric image for an alert

        :param id: The ID or URL-encoded path of the project (required)
        :type id: str
        :param alert_iid: The IID of the Alert (required)
        :type alert_iid: int
        :param metric_image_id: The ID of metric image (required)
        :type metric_image_id: int
        :param url: The url to view more metric info
        :type url: str
        :param url_text: A description of the image or URL
        :type url_text: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_metric_image_id_serialize(
            id=id,
            alert_iid=alert_iid,
            metric_image_id=metric_image_id,
            url=url,
            url_text=url_text,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APIEntitiesMetricImage",
            '403': None,
            '422': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_api_v4_projects_id_alert_management_alerts_alert_iid_metric_images_metric_image_id_serialize(
        self,
        id,
        alert_iid,
        metric_image_id,
        url,
        url_text,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        if alert_iid is not None:
            _path_params['alert_iid'] = alert_iid
        if metric_image_id is not None:
            _path_params['metric_image_id'] = metric_image_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if url is not None:
            _form_params.append(('url', url))
        if url_text is not None:
            _form_params.append(('url_text', url_text))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/projects/{id}/alert_management_alerts/{alert_iid}/metric_images/{metric_image_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



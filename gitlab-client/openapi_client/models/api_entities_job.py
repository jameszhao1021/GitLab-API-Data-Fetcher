# coding: utf-8

"""
    GitLab API

    An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.api_entities_commit import APIEntitiesCommit
from openapi_client.models.api_entities_job_project import APIEntitiesJobProject
from openapi_client.models.api_entities_user_basic import APIEntitiesUserBasic
from typing import Optional, Set
from typing_extensions import Self

class APIEntitiesJob(BaseModel):
    """
    API_Entities_Job model
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="The ID of the job")
    name: Optional[StrictStr] = Field(default=None, description="The name of the job")
    status: Optional[StrictStr] = Field(default=None, description="The current status of the job")
    stage: Optional[StrictStr] = Field(default=None, description="The stage of the job in the CI/CD pipeline")
    created_at: Optional[datetime] = Field(default=None, description="The creation time of the job")
    started_at: Optional[datetime] = Field(default=None, description="The start time of the job")
    finished_at: Optional[datetime] = Field(default=None, description="The finish time of the job")
    commit: Optional[APIEntitiesCommit] = None
    archived: Optional[StrictBool] = Field(default=None, description="Indicates if the job is archived")
    allow_failure: Optional[StrictBool] = Field(default=None, description="Indicates if the job is allowed to fail")
    erased_at: Optional[datetime] = Field(default=None, description="The time when the job was erased, if applicable")
    duration: Optional[StrictInt] = Field(default=None, description="The duration of the job in seconds")
    queued_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The duration the job was queued before execution, in seconds")
    ref: Optional[StrictStr] = Field(default=None, description="The reference for the job")
    artifacts: Optional[List[StrictStr]] = Field(default=None, description="The artifacts produced by the job")
    tag: Optional[StrictBool] = Field(default=None, description="Indicates if the job is tagged")
    web_url: Optional[StrictStr] = Field(default=None, description="The URL for accessing the job in the web interface")
    project: Optional[APIEntitiesJobProject] = None
    user: Optional[APIEntitiesUserBasic] = None
    __properties: ClassVar[List[str]] = ["id", "name", "status", "stage", "created_at", "started_at", "finished_at", "commit", "archived", "allow_failure", "erased_at", "duration", "queued_duration", "ref", "artifacts", "tag", "web_url", "project", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of APIEntitiesJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of commit
        if self.commit:
            _dict['commit'] = self.commit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of APIEntitiesJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "stage": obj.get("stage"),
            "created_at": obj.get("created_at"),
            "started_at": obj.get("started_at"),
            "finished_at": obj.get("finished_at"),
            "commit": APIEntitiesCommit.from_dict(obj["commit"]) if obj.get("commit") is not None else None,
            "archived": obj.get("archived"),
            "allow_failure": obj.get("allow_failure"),
            "erased_at": obj.get("erased_at"),
            "duration": obj.get("duration"),
            "queued_duration": obj.get("queued_duration"),
            "ref": obj.get("ref"),
            "artifacts": obj.get("artifacts"),
            "tag": obj.get("tag"),
            "web_url": obj.get("web_url"),
            "project": APIEntitiesJobProject.from_dict(obj["project"]) if obj.get("project") is not None else None,
            "user": APIEntitiesUserBasic.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        return _obj



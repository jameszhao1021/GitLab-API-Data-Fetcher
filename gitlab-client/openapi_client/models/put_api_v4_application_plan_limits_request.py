# coding: utf-8

"""
    GitLab API

    An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PutApiV4ApplicationPlanLimitsRequest(BaseModel):
    """
    PutApiV4ApplicationPlanLimitsRequest
    """ # noqa: E501
    plan_name: StrictStr = Field(description="Name of the plan to update")
    ci_pipeline_size: Optional[StrictInt] = Field(default=None, description="Maximum number of jobs in a single pipeline")
    ci_active_jobs: Optional[StrictInt] = Field(default=None, description="Total number of jobs in currently active pipelines")
    ci_project_subscriptions: Optional[StrictInt] = Field(default=None, description="Maximum number of pipeline subscriptions to and from a project")
    ci_pipeline_schedules: Optional[StrictInt] = Field(default=None, description="Maximum number of pipeline schedules")
    ci_needs_size_limit: Optional[StrictInt] = Field(default=None, description="Maximum number of DAG dependencies that a job can have")
    ci_registered_group_runners: Optional[StrictInt] = Field(default=None, description="Maximum number of runners registered per group")
    ci_registered_project_runners: Optional[StrictInt] = Field(default=None, description="Maximum number of runners registered per project")
    conan_max_file_size: Optional[StrictInt] = Field(default=None, description="Maximum Conan package file size in bytes")
    enforcement_limit: Optional[StrictInt] = Field(default=None, description="Maximum storage size for the root namespace enforcement in MiB")
    generic_packages_max_file_size: Optional[StrictInt] = Field(default=None, description="Maximum generic package file size in bytes")
    helm_max_file_size: Optional[StrictInt] = Field(default=None, description="Maximum Helm chart file size in bytes")
    maven_max_file_size: Optional[StrictInt] = Field(default=None, description="Maximum Maven package file size in bytes")
    notification_limit: Optional[StrictInt] = Field(default=None, description="Maximum storage size for the root namespace notifications in MiB")
    npm_max_file_size: Optional[StrictInt] = Field(default=None, description="Maximum NPM package file size in bytes")
    nuget_max_file_size: Optional[StrictInt] = Field(default=None, description="Maximum NuGet package file size in bytes")
    pypi_max_file_size: Optional[StrictInt] = Field(default=None, description="Maximum PyPI package file size in bytes")
    terraform_module_max_file_size: Optional[StrictInt] = Field(default=None, description="Maximum Terraform Module package file size in bytes")
    storage_size_limit: Optional[StrictInt] = Field(default=None, description="Maximum storage size for the root namespace in MiB")
    pipeline_hierarchy_size: Optional[StrictInt] = Field(default=None, description="Maximum number of downstream pipelines in a pipeline's hierarchy tree")
    __properties: ClassVar[List[str]] = ["plan_name", "ci_pipeline_size", "ci_active_jobs", "ci_project_subscriptions", "ci_pipeline_schedules", "ci_needs_size_limit", "ci_registered_group_runners", "ci_registered_project_runners", "conan_max_file_size", "enforcement_limit", "generic_packages_max_file_size", "helm_max_file_size", "maven_max_file_size", "notification_limit", "npm_max_file_size", "nuget_max_file_size", "pypi_max_file_size", "terraform_module_max_file_size", "storage_size_limit", "pipeline_hierarchy_size"]

    @field_validator('plan_name')
    def plan_name_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['default', 'free', 'bronze', 'silver', 'premium', 'gold', 'ultimate', 'ultimate_trial', 'premium_trial', 'opensource']):
            raise ValueError("must be one of enum values ('default', 'free', 'bronze', 'silver', 'premium', 'gold', 'ultimate', 'ultimate_trial', 'premium_trial', 'opensource')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PutApiV4ApplicationPlanLimitsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PutApiV4ApplicationPlanLimitsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "plan_name": obj.get("plan_name"),
            "ci_pipeline_size": obj.get("ci_pipeline_size"),
            "ci_active_jobs": obj.get("ci_active_jobs"),
            "ci_project_subscriptions": obj.get("ci_project_subscriptions"),
            "ci_pipeline_schedules": obj.get("ci_pipeline_schedules"),
            "ci_needs_size_limit": obj.get("ci_needs_size_limit"),
            "ci_registered_group_runners": obj.get("ci_registered_group_runners"),
            "ci_registered_project_runners": obj.get("ci_registered_project_runners"),
            "conan_max_file_size": obj.get("conan_max_file_size"),
            "enforcement_limit": obj.get("enforcement_limit"),
            "generic_packages_max_file_size": obj.get("generic_packages_max_file_size"),
            "helm_max_file_size": obj.get("helm_max_file_size"),
            "maven_max_file_size": obj.get("maven_max_file_size"),
            "notification_limit": obj.get("notification_limit"),
            "npm_max_file_size": obj.get("npm_max_file_size"),
            "nuget_max_file_size": obj.get("nuget_max_file_size"),
            "pypi_max_file_size": obj.get("pypi_max_file_size"),
            "terraform_module_max_file_size": obj.get("terraform_module_max_file_size"),
            "storage_size_limit": obj.get("storage_size_limit"),
            "pipeline_hierarchy_size": obj.get("pipeline_hierarchy_size")
        })
        return _obj



# coding: utf-8

"""
    GitLab API

    An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class APIEntitiesAppearance(BaseModel):
    """
    API_Entities_Appearance model
    """ # noqa: E501
    title: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    pwa_name: Optional[StrictStr] = None
    pwa_short_name: Optional[StrictStr] = None
    pwa_description: Optional[StrictStr] = None
    logo: Optional[StrictStr] = None
    pwa_icon: Optional[StrictStr] = None
    header_logo: Optional[StrictStr] = None
    favicon: Optional[StrictStr] = None
    new_project_guidelines: Optional[StrictStr] = None
    profile_image_guidelines: Optional[StrictStr] = None
    header_message: Optional[StrictStr] = None
    footer_message: Optional[StrictStr] = None
    message_background_color: Optional[StrictStr] = None
    message_font_color: Optional[StrictStr] = None
    email_header_and_footer_enabled: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["title", "description", "pwa_name", "pwa_short_name", "pwa_description", "logo", "pwa_icon", "header_logo", "favicon", "new_project_guidelines", "profile_image_guidelines", "header_message", "footer_message", "message_background_color", "message_font_color", "email_header_and_footer_enabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of APIEntitiesAppearance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of APIEntitiesAppearance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "description": obj.get("description"),
            "pwa_name": obj.get("pwa_name"),
            "pwa_short_name": obj.get("pwa_short_name"),
            "pwa_description": obj.get("pwa_description"),
            "logo": obj.get("logo"),
            "pwa_icon": obj.get("pwa_icon"),
            "header_logo": obj.get("header_logo"),
            "favicon": obj.get("favicon"),
            "new_project_guidelines": obj.get("new_project_guidelines"),
            "profile_image_guidelines": obj.get("profile_image_guidelines"),
            "header_message": obj.get("header_message"),
            "footer_message": obj.get("footer_message"),
            "message_background_color": obj.get("message_background_color"),
            "message_font_color": obj.get("message_font_color"),
            "email_header_and_footer_enabled": obj.get("email_header_and_footer_enabled")
        })
        return _obj



# coding: utf-8

"""
    GitLab API

    An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.api_entities_bulk_import import APIEntitiesBulkImport
from openapi_client.models.api_entities_bulk_imports import APIEntitiesBulkImports

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class BulkImportsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_api_v4_bulk_imports(
        self,
        page: Annotated[Optional[StrictInt], Field(description="Current page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of items per page")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Return GitLab Migrations sorted in created by `asc` or `desc` order.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Return GitLab Migrations with specified status")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[APIEntitiesBulkImport]:
        """List all GitLab Migrations

        This feature was introduced in GitLab 14.1.

        :param page: Current page number
        :type page: int
        :param per_page: Number of items per page
        :type per_page: int
        :param sort: Return GitLab Migrations sorted in created by `asc` or `desc` order.
        :type sort: str
        :param status: Return GitLab Migrations with specified status
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v4_bulk_imports_serialize(
            page=page,
            per_page=per_page,
            sort=sort,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[APIEntitiesBulkImport]",
            '401': None,
            '404': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_api_v4_bulk_imports_with_http_info(
        self,
        page: Annotated[Optional[StrictInt], Field(description="Current page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of items per page")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Return GitLab Migrations sorted in created by `asc` or `desc` order.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Return GitLab Migrations with specified status")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[APIEntitiesBulkImport]]:
        """List all GitLab Migrations

        This feature was introduced in GitLab 14.1.

        :param page: Current page number
        :type page: int
        :param per_page: Number of items per page
        :type per_page: int
        :param sort: Return GitLab Migrations sorted in created by `asc` or `desc` order.
        :type sort: str
        :param status: Return GitLab Migrations with specified status
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v4_bulk_imports_serialize(
            page=page,
            per_page=per_page,
            sort=sort,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[APIEntitiesBulkImport]",
            '401': None,
            '404': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_api_v4_bulk_imports_without_preload_content(
        self,
        page: Annotated[Optional[StrictInt], Field(description="Current page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of items per page")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Return GitLab Migrations sorted in created by `asc` or `desc` order.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Return GitLab Migrations with specified status")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all GitLab Migrations

        This feature was introduced in GitLab 14.1.

        :param page: Current page number
        :type page: int
        :param per_page: Number of items per page
        :type per_page: int
        :param sort: Return GitLab Migrations sorted in created by `asc` or `desc` order.
        :type sort: str
        :param status: Return GitLab Migrations with specified status
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v4_bulk_imports_serialize(
            page=page,
            per_page=per_page,
            sort=sort,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[APIEntitiesBulkImport]",
            '401': None,
            '404': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_api_v4_bulk_imports_serialize(
        self,
        page,
        per_page,
        sort,
        status,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/bulk_imports',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_api_v4_bulk_imports_entities(
        self,
        page: Annotated[Optional[StrictInt], Field(description="Current page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of items per page")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Return GitLab Migrations sorted in created by `asc` or `desc` order.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Return all GitLab Migrations' entities with specified status")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[APIEntitiesBulkImports]:
        """List all GitLab Migrations' entities

        This feature was introduced in GitLab 14.1.

        :param page: Current page number
        :type page: int
        :param per_page: Number of items per page
        :type per_page: int
        :param sort: Return GitLab Migrations sorted in created by `asc` or `desc` order.
        :type sort: str
        :param status: Return all GitLab Migrations' entities with specified status
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v4_bulk_imports_entities_serialize(
            page=page,
            per_page=per_page,
            sort=sort,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[APIEntitiesBulkImports]",
            '401': None,
            '404': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_api_v4_bulk_imports_entities_with_http_info(
        self,
        page: Annotated[Optional[StrictInt], Field(description="Current page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of items per page")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Return GitLab Migrations sorted in created by `asc` or `desc` order.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Return all GitLab Migrations' entities with specified status")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[APIEntitiesBulkImports]]:
        """List all GitLab Migrations' entities

        This feature was introduced in GitLab 14.1.

        :param page: Current page number
        :type page: int
        :param per_page: Number of items per page
        :type per_page: int
        :param sort: Return GitLab Migrations sorted in created by `asc` or `desc` order.
        :type sort: str
        :param status: Return all GitLab Migrations' entities with specified status
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v4_bulk_imports_entities_serialize(
            page=page,
            per_page=per_page,
            sort=sort,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[APIEntitiesBulkImports]",
            '401': None,
            '404': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_api_v4_bulk_imports_entities_without_preload_content(
        self,
        page: Annotated[Optional[StrictInt], Field(description="Current page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of items per page")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Return GitLab Migrations sorted in created by `asc` or `desc` order.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Return all GitLab Migrations' entities with specified status")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all GitLab Migrations' entities

        This feature was introduced in GitLab 14.1.

        :param page: Current page number
        :type page: int
        :param per_page: Number of items per page
        :type per_page: int
        :param sort: Return GitLab Migrations sorted in created by `asc` or `desc` order.
        :type sort: str
        :param status: Return all GitLab Migrations' entities with specified status
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v4_bulk_imports_entities_serialize(
            page=page,
            per_page=per_page,
            sort=sort,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[APIEntitiesBulkImports]",
            '401': None,
            '404': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_api_v4_bulk_imports_entities_serialize(
        self,
        page,
        per_page,
        sort,
        status,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/bulk_imports/entities',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_api_v4_bulk_imports_import_id(
        self,
        import_id: Annotated[StrictInt, Field(description="The ID of user's GitLab Migration")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> APIEntitiesBulkImport:
        """Get GitLab Migration details

        This feature was introduced in GitLab 14.1.

        :param import_id: The ID of user's GitLab Migration (required)
        :type import_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v4_bulk_imports_import_id_serialize(
            import_id=import_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APIEntitiesBulkImport",
            '401': None,
            '404': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_api_v4_bulk_imports_import_id_with_http_info(
        self,
        import_id: Annotated[StrictInt, Field(description="The ID of user's GitLab Migration")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[APIEntitiesBulkImport]:
        """Get GitLab Migration details

        This feature was introduced in GitLab 14.1.

        :param import_id: The ID of user's GitLab Migration (required)
        :type import_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v4_bulk_imports_import_id_serialize(
            import_id=import_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APIEntitiesBulkImport",
            '401': None,
            '404': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_api_v4_bulk_imports_import_id_without_preload_content(
        self,
        import_id: Annotated[StrictInt, Field(description="The ID of user's GitLab Migration")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get GitLab Migration details

        This feature was introduced in GitLab 14.1.

        :param import_id: The ID of user's GitLab Migration (required)
        :type import_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v4_bulk_imports_import_id_serialize(
            import_id=import_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APIEntitiesBulkImport",
            '401': None,
            '404': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_api_v4_bulk_imports_import_id_serialize(
        self,
        import_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if import_id is not None:
            _path_params['import_id'] = import_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/bulk_imports/{import_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_api_v4_bulk_imports_import_id_entities(
        self,
        import_id: Annotated[StrictInt, Field(description="The ID of user's GitLab Migration")],
        status: Annotated[Optional[StrictStr], Field(description="Return import entities with specified status")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Current page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of items per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[APIEntitiesBulkImports]:
        """List GitLab Migration entities

        This feature was introduced in GitLab 14.1.

        :param import_id: The ID of user's GitLab Migration (required)
        :type import_id: int
        :param status: Return import entities with specified status
        :type status: str
        :param page: Current page number
        :type page: int
        :param per_page: Number of items per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v4_bulk_imports_import_id_entities_serialize(
            import_id=import_id,
            status=status,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[APIEntitiesBulkImports]",
            '401': None,
            '404': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_api_v4_bulk_imports_import_id_entities_with_http_info(
        self,
        import_id: Annotated[StrictInt, Field(description="The ID of user's GitLab Migration")],
        status: Annotated[Optional[StrictStr], Field(description="Return import entities with specified status")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Current page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of items per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[APIEntitiesBulkImports]]:
        """List GitLab Migration entities

        This feature was introduced in GitLab 14.1.

        :param import_id: The ID of user's GitLab Migration (required)
        :type import_id: int
        :param status: Return import entities with specified status
        :type status: str
        :param page: Current page number
        :type page: int
        :param per_page: Number of items per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v4_bulk_imports_import_id_entities_serialize(
            import_id=import_id,
            status=status,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[APIEntitiesBulkImports]",
            '401': None,
            '404': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_api_v4_bulk_imports_import_id_entities_without_preload_content(
        self,
        import_id: Annotated[StrictInt, Field(description="The ID of user's GitLab Migration")],
        status: Annotated[Optional[StrictStr], Field(description="Return import entities with specified status")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Current page number")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of items per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List GitLab Migration entities

        This feature was introduced in GitLab 14.1.

        :param import_id: The ID of user's GitLab Migration (required)
        :type import_id: int
        :param status: Return import entities with specified status
        :type status: str
        :param page: Current page number
        :type page: int
        :param per_page: Number of items per page
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v4_bulk_imports_import_id_entities_serialize(
            import_id=import_id,
            status=status,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[APIEntitiesBulkImports]",
            '401': None,
            '404': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_api_v4_bulk_imports_import_id_entities_serialize(
        self,
        import_id,
        status,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if import_id is not None:
            _path_params['import_id'] = import_id
        # process the query parameters
        if status is not None:
            
            _query_params.append(('status', status))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/bulk_imports/{import_id}/entities',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_api_v4_bulk_imports_import_id_entities_entity_id(
        self,
        import_id: Annotated[StrictInt, Field(description="The ID of user's GitLab Migration")],
        entity_id: Annotated[StrictInt, Field(description="The ID of GitLab Migration entity")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> APIEntitiesBulkImports:
        """Get GitLab Migration entity details

        This feature was introduced in GitLab 14.1.

        :param import_id: The ID of user's GitLab Migration (required)
        :type import_id: int
        :param entity_id: The ID of GitLab Migration entity (required)
        :type entity_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v4_bulk_imports_import_id_entities_entity_id_serialize(
            import_id=import_id,
            entity_id=entity_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APIEntitiesBulkImports",
            '401': None,
            '404': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_api_v4_bulk_imports_import_id_entities_entity_id_with_http_info(
        self,
        import_id: Annotated[StrictInt, Field(description="The ID of user's GitLab Migration")],
        entity_id: Annotated[StrictInt, Field(description="The ID of GitLab Migration entity")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[APIEntitiesBulkImports]:
        """Get GitLab Migration entity details

        This feature was introduced in GitLab 14.1.

        :param import_id: The ID of user's GitLab Migration (required)
        :type import_id: int
        :param entity_id: The ID of GitLab Migration entity (required)
        :type entity_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v4_bulk_imports_import_id_entities_entity_id_serialize(
            import_id=import_id,
            entity_id=entity_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APIEntitiesBulkImports",
            '401': None,
            '404': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_api_v4_bulk_imports_import_id_entities_entity_id_without_preload_content(
        self,
        import_id: Annotated[StrictInt, Field(description="The ID of user's GitLab Migration")],
        entity_id: Annotated[StrictInt, Field(description="The ID of GitLab Migration entity")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get GitLab Migration entity details

        This feature was introduced in GitLab 14.1.

        :param import_id: The ID of user's GitLab Migration (required)
        :type import_id: int
        :param entity_id: The ID of GitLab Migration entity (required)
        :type entity_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_api_v4_bulk_imports_import_id_entities_entity_id_serialize(
            import_id=import_id,
            entity_id=entity_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APIEntitiesBulkImports",
            '401': None,
            '404': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_api_v4_bulk_imports_import_id_entities_entity_id_serialize(
        self,
        import_id,
        entity_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if import_id is not None:
            _path_params['import_id'] = import_id
        if entity_id is not None:
            _path_params['entity_id'] = entity_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/bulk_imports/{import_id}/entities/{entity_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_api_v4_bulk_imports(
        self,
        configuration_url: Annotated[StrictStr, Field(description="Source GitLab instance URL")],
        configuration_access_token: Annotated[StrictStr, Field(description="Access token to the source GitLab instance")],
        entities_source_type: Annotated[List[StrictStr], Field(description="Source entity type")],
        entities_source_full_path: Annotated[List[StrictStr], Field(description="Relative path of the source entity to import")],
        entities_destination_namespace: Annotated[List[StrictStr], Field(description="Destination namespace for the entity")],
        entities_destination_slug: Annotated[Optional[List[StrictStr]], Field(description="Destination slug for the entity")] = None,
        entities_destination_name: Annotated[Optional[List[StrictStr]], Field(description="Deprecated: Use :destination_slug instead. Destination slug for the entity")] = None,
        entities_migrate_projects: Annotated[Optional[List[StrictBool]], Field(description="Indicates group migration should include nested projects")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> APIEntitiesBulkImport:
        """Start a new GitLab Migration

        This feature was introduced in GitLab 14.2.

        :param configuration_url: Source GitLab instance URL (required)
        :type configuration_url: str
        :param configuration_access_token: Access token to the source GitLab instance (required)
        :type configuration_access_token: str
        :param entities_source_type: Source entity type (required)
        :type entities_source_type: List[str]
        :param entities_source_full_path: Relative path of the source entity to import (required)
        :type entities_source_full_path: List[str]
        :param entities_destination_namespace: Destination namespace for the entity (required)
        :type entities_destination_namespace: List[str]
        :param entities_destination_slug: Destination slug for the entity
        :type entities_destination_slug: List[str]
        :param entities_destination_name: Deprecated: Use :destination_slug instead. Destination slug for the entity
        :type entities_destination_name: List[str]
        :param entities_migrate_projects: Indicates group migration should include nested projects
        :type entities_migrate_projects: List[bool]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_api_v4_bulk_imports_serialize(
            configuration_url=configuration_url,
            configuration_access_token=configuration_access_token,
            entities_source_type=entities_source_type,
            entities_source_full_path=entities_source_full_path,
            entities_destination_namespace=entities_destination_namespace,
            entities_destination_slug=entities_destination_slug,
            entities_destination_name=entities_destination_name,
            entities_migrate_projects=entities_migrate_projects,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APIEntitiesBulkImport",
            '400': None,
            '401': None,
            '404': None,
            '422': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_api_v4_bulk_imports_with_http_info(
        self,
        configuration_url: Annotated[StrictStr, Field(description="Source GitLab instance URL")],
        configuration_access_token: Annotated[StrictStr, Field(description="Access token to the source GitLab instance")],
        entities_source_type: Annotated[List[StrictStr], Field(description="Source entity type")],
        entities_source_full_path: Annotated[List[StrictStr], Field(description="Relative path of the source entity to import")],
        entities_destination_namespace: Annotated[List[StrictStr], Field(description="Destination namespace for the entity")],
        entities_destination_slug: Annotated[Optional[List[StrictStr]], Field(description="Destination slug for the entity")] = None,
        entities_destination_name: Annotated[Optional[List[StrictStr]], Field(description="Deprecated: Use :destination_slug instead. Destination slug for the entity")] = None,
        entities_migrate_projects: Annotated[Optional[List[StrictBool]], Field(description="Indicates group migration should include nested projects")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[APIEntitiesBulkImport]:
        """Start a new GitLab Migration

        This feature was introduced in GitLab 14.2.

        :param configuration_url: Source GitLab instance URL (required)
        :type configuration_url: str
        :param configuration_access_token: Access token to the source GitLab instance (required)
        :type configuration_access_token: str
        :param entities_source_type: Source entity type (required)
        :type entities_source_type: List[str]
        :param entities_source_full_path: Relative path of the source entity to import (required)
        :type entities_source_full_path: List[str]
        :param entities_destination_namespace: Destination namespace for the entity (required)
        :type entities_destination_namespace: List[str]
        :param entities_destination_slug: Destination slug for the entity
        :type entities_destination_slug: List[str]
        :param entities_destination_name: Deprecated: Use :destination_slug instead. Destination slug for the entity
        :type entities_destination_name: List[str]
        :param entities_migrate_projects: Indicates group migration should include nested projects
        :type entities_migrate_projects: List[bool]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_api_v4_bulk_imports_serialize(
            configuration_url=configuration_url,
            configuration_access_token=configuration_access_token,
            entities_source_type=entities_source_type,
            entities_source_full_path=entities_source_full_path,
            entities_destination_namespace=entities_destination_namespace,
            entities_destination_slug=entities_destination_slug,
            entities_destination_name=entities_destination_name,
            entities_migrate_projects=entities_migrate_projects,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APIEntitiesBulkImport",
            '400': None,
            '401': None,
            '404': None,
            '422': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_api_v4_bulk_imports_without_preload_content(
        self,
        configuration_url: Annotated[StrictStr, Field(description="Source GitLab instance URL")],
        configuration_access_token: Annotated[StrictStr, Field(description="Access token to the source GitLab instance")],
        entities_source_type: Annotated[List[StrictStr], Field(description="Source entity type")],
        entities_source_full_path: Annotated[List[StrictStr], Field(description="Relative path of the source entity to import")],
        entities_destination_namespace: Annotated[List[StrictStr], Field(description="Destination namespace for the entity")],
        entities_destination_slug: Annotated[Optional[List[StrictStr]], Field(description="Destination slug for the entity")] = None,
        entities_destination_name: Annotated[Optional[List[StrictStr]], Field(description="Deprecated: Use :destination_slug instead. Destination slug for the entity")] = None,
        entities_migrate_projects: Annotated[Optional[List[StrictBool]], Field(description="Indicates group migration should include nested projects")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Start a new GitLab Migration

        This feature was introduced in GitLab 14.2.

        :param configuration_url: Source GitLab instance URL (required)
        :type configuration_url: str
        :param configuration_access_token: Access token to the source GitLab instance (required)
        :type configuration_access_token: str
        :param entities_source_type: Source entity type (required)
        :type entities_source_type: List[str]
        :param entities_source_full_path: Relative path of the source entity to import (required)
        :type entities_source_full_path: List[str]
        :param entities_destination_namespace: Destination namespace for the entity (required)
        :type entities_destination_namespace: List[str]
        :param entities_destination_slug: Destination slug for the entity
        :type entities_destination_slug: List[str]
        :param entities_destination_name: Deprecated: Use :destination_slug instead. Destination slug for the entity
        :type entities_destination_name: List[str]
        :param entities_migrate_projects: Indicates group migration should include nested projects
        :type entities_migrate_projects: List[bool]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_api_v4_bulk_imports_serialize(
            configuration_url=configuration_url,
            configuration_access_token=configuration_access_token,
            entities_source_type=entities_source_type,
            entities_source_full_path=entities_source_full_path,
            entities_destination_namespace=entities_destination_namespace,
            entities_destination_slug=entities_destination_slug,
            entities_destination_name=entities_destination_name,
            entities_migrate_projects=entities_migrate_projects,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "APIEntitiesBulkImport",
            '400': None,
            '401': None,
            '404': None,
            '422': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_api_v4_bulk_imports_serialize(
        self,
        configuration_url,
        configuration_access_token,
        entities_source_type,
        entities_source_full_path,
        entities_destination_namespace,
        entities_destination_slug,
        entities_destination_name,
        entities_migrate_projects,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'entities[source_type]': 'csv',
            'entities[source_full_path]': 'csv',
            'entities[destination_namespace]': 'csv',
            'entities[destination_slug]': 'csv',
            'entities[destination_name]': 'csv',
            'entities[migrate_projects]': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if configuration_url is not None:
            _form_params.append(('configuration[url]', configuration_url))
        if configuration_access_token is not None:
            _form_params.append(('configuration[access_token]', configuration_access_token))
        if entities_source_type is not None:
            _form_params.append(('entities[source_type]', entities_source_type))
        if entities_source_full_path is not None:
            _form_params.append(('entities[source_full_path]', entities_source_full_path))
        if entities_destination_namespace is not None:
            _form_params.append(('entities[destination_namespace]', entities_destination_namespace))
        if entities_destination_slug is not None:
            _form_params.append(('entities[destination_slug]', entities_destination_slug))
        if entities_destination_name is not None:
            _form_params.append(('entities[destination_name]', entities_destination_name))
        if entities_migrate_projects is not None:
            _form_params.append(('entities[migrate_projects]', entities_migrate_projects))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/bulk_imports',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


